{"version":3,"sources":["Components/Unit/Unit.js","Components/Grids/Grids.js","Components/Settings/Settings.js","App.js","reportWebVitals.js","index.js"],"names":["Unit","props","style","height","size","width","backgroundColor","color","className","id","onClick","createGrid","row","col","obstacles","setObstacles","data","i","eachRow","j","push","element","document","getElementById","classList","contains","remove","add","toggleRed","display","flexDirection","Grids","useEffect","setGridSize","state","breadth","parseInt","area","length","sizeOfUnit","speed","implWidth","getGridSize","minHeight","gridSize","Settings","useState","setSize","completion","total","percent","setPercent","getElementsByTagName","fontSize","Container","fluid","Row","Col","min","max","value","onChange","e","target","InputGroup","Prepend","Text","FormControl","defaultValue","dispatch","type","aria-label","aria-describedby","Button","variant","traverse","initialParams","reducerFunction","action","Error","App","useReducer","rows","cols","reducer","time","setTimeout","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.05dc5438.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Unit(props){\r\n\r\n    return <div style={{\r\n        height:`${props.size}rem`,\r\n        width:`${props.size}rem`,\r\n        backgroundColor:props.color\r\n    }} className='border' id={props.id} onClick={props.onClick}></div>\r\n}\r\n\r\nexport default Unit;","import React, {useEffect } from 'react';\r\nimport Unit from '../Unit/Unit';\r\n\r\nconst getGridSize = (state) => {\r\n    \r\n    const initTime = 60;\r\n    const breadth = parseInt(state.area/state.length);\r\n\r\n    const sizeOfUnit = ((state.speed/60)*initTime)*state.implWidth;\r\n\r\n    const numRowUnits = parseInt((1/sizeOfUnit)*state.length);\r\n    const numColUnits = parseInt((1/sizeOfUnit)*breadth);\r\n\r\n    return [numRowUnits, numColUnits, sizeOfUnit];\r\n}\r\n\r\nconst toggleRed = (i, j, obstacles, setObstacles) => {\r\n    const element = document.getElementById(`${i}-${j}`);\r\n    if(element.classList.contains('obstacle')){\r\n        element.classList.remove('obstacle');\r\n        setObstacles(obstacles-1);\r\n    }\r\n    else{\r\n        element.classList.add('obstacle');\r\n        setObstacles(obstacles+1);\r\n    }\r\n}\r\n\r\nconst createGrid = (row, col, obstacles, setObstacles) => {\r\n    let data = [];\r\n    for(let i = 0; i<col; i++){\r\n        let eachRow = [];\r\n        for(let j = 0; j<row; j++){\r\n            eachRow.push( <Unit size='1' color='white' id={`${i}-${j}`} key={`${i}-${j}`} onClick={() => toggleRed(i, j, obstacles, setObstacles)}/>)\r\n        }\r\n        data.push(<div key={`row-${i}`} id={`row-${i}`} style={{display:\"flex\", flexDirection:\"row\"}}>{eachRow}</div>)\r\n    }\r\n    return data;\r\n}\r\n\r\nfunction Grids(props){\r\n\r\n    \r\n    useEffect(() => {\r\n        props.setGridSize(getGridSize(props.state));\r\n    }, [props.state])\r\n\r\n\r\n/*<div style={{display:\"flex\", flexDirection:\"row\"}}>\r\n            <Unit size='1' color='black'/>\r\n            <Unit size='1' color='black'/>\r\n        </div>*/\r\n    return <div style={{display:\"flex\", flexDirection:\"column\", width:'100%', minHeight:'200px'}}>\r\n        {createGrid(props.gridSize[0], props.gridSize[1], props.obstacles, props.setObstacles)}\r\n    </div>\r\n}\r\n\r\nexport default Grids;","import React, {useState, useEffect} from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport FormControl from 'react-bootstrap/FormControl'\r\nimport RangeSlider from 'react-bootstrap-range-slider';\r\n\r\nfunction Settings(props){\r\n    const [size, setSize] = useState(7);\r\n    const [percent, setPercent] = useState((props.completion/props.total)*100);\r\n\r\n    useEffect(() => {\r\n        var htmlTag = document.getElementsByTagName('html')[0];\r\n        htmlTag.style.fontSize = `${size}px`;\r\n    }, [size]);\r\n\r\n    useEffect(()=>{\r\n        setPercent((props.completion/props.total)*100);\r\n    }, [props.completion, props.total])\r\n\r\n    return <Container fluid>\r\n        <Row>\r\n          <Col>\r\n            <p style={{fontSize:'25px'}} className='p-3'>{`Each box in the grid is ${props.gridSize[2]} unit size and 1 second in simulator is 1 minute in real life`} </p>\r\n          </Col>  \r\n        </Row>\r\n        <Row className='justify-content-center p-5 m-5'>\r\n            <Col className='col-1'>\r\n                <p style={{fontSize:'25px'}} className='p-3'>Completion&nbsp;&nbsp; </p>\r\n            </Col>\r\n            <Col  className='col-1'>\r\n            <p style={{fontSize:'25px'}} className='p-3'>{percent}% </p>\r\n            </Col>\r\n        </Row>\r\n        <Row className='justify-content-center p-5 m-5'>\r\n            <Col className='col-2'>\r\n                <p style={{fontSize:'25px'}} className='p-3'>Size</p>\r\n                <RangeSlider className='p-3'\r\n                    min={1}\r\n                    max={10}\r\n                    value={size}\r\n                    onChange={e => setSize(e.target.value)}\r\n                />\r\n            </Col>\r\n        </Row>\r\n\r\n        <Row className='justify-content-center p-5 m-5'>\r\n            <Col className='col-5'>\r\n                <p style={{fontSize:'25px'}} className='p-3'>Units must be consistent across all the parameters</p>\r\n            </Col>\r\n        </Row>\r\n\r\n        <Row className='justify-content-center p-5 m-5'>\r\n        <Col className='col-3' >\r\n                <InputGroup className=\"mb-3\" >\r\n                    <InputGroup.Prepend>\r\n                    <InputGroup.Text id=\"area\" style={{fontSize:'20px'}}>Area (sq units)</InputGroup.Text>\r\n                    </InputGroup.Prepend>\r\n                    <FormControl style={{fontSize:'20px'}} \r\n                        defaultValue={props.state.area}\r\n                        onChange={(e) => e.target.value ? props.dispatch({type:'area', value:e.target.value}) : null}\r\n                        aria-label=\"area\"\r\n                        aria-describedby=\"area\"\r\n                    />\r\n                </InputGroup>\r\n            </Col>\r\n            <Col className='col-3' >\r\n                <InputGroup className=\"mb-3\">\r\n                    <InputGroup.Prepend>\r\n                    <InputGroup.Text id=\"impl-width\" style={{fontSize:'20px'}}>Impl Width (units)</InputGroup.Text>\r\n                    </InputGroup.Prepend>\r\n                    <FormControl style={{fontSize:'20px'}}\r\n                    defaultValue={props.state.implWidth}\r\n                    onChange={(e) => e.target.value ? props.dispatch({type:'implWidth', value:e.target.value}) : null}\r\n                        aria-label=\"impl-width\"\r\n                        aria-describedby=\"impl-width\"\r\n                    />\r\n                </InputGroup>\r\n            </Col>\r\n            <Col className='col-3' >\r\n                <InputGroup className=\"mb-3\">\r\n                    <InputGroup.Prepend>\r\n                    <InputGroup.Text id=\"speed\" style={{fontSize:'20px'}}>speed (unit/minute)</InputGroup.Text>\r\n                    </InputGroup.Prepend>\r\n                    <FormControl style={{fontSize:'20px'}}\r\n                    defaultValue={props.state.speed}\r\n                    onChange={(e) => e.target.value ? props.dispatch({type:'speed', value:e.target.value}) : null}\r\n                        aria-label=\"speed\"\r\n                        aria-describedby=\"speed\"\r\n                    />\r\n                </InputGroup>\r\n            </Col>\r\n\r\n            <Col className='col-3' >\r\n                <InputGroup className=\"mb-3\">\r\n                    <InputGroup.Prepend>\r\n                    <InputGroup.Text id=\"length\" style={{fontSize:'20px'}}>length (unit)</InputGroup.Text>\r\n                    </InputGroup.Prepend>\r\n                    <FormControl style={{fontSize:'20px'}}\r\n                    defaultValue={props.state.length}\r\n                    onChange={(e) => e.target.value ? props.dispatch({type:'length', value:e.target.value}) : null}\r\n                        aria-label=\"length\"\r\n                        aria-describedby=\"length\"\r\n                    />\r\n                </InputGroup>\r\n            </Col>\r\n        </Row>\r\n        <Row className='justify-content-center p-5 m-5'>\r\n            <Button variant=\"outline-primary\" onClick={props.traverse}>Start</Button>\r\n        </Row>\r\n    </Container>\r\n}\r\n\r\nexport default Settings;","import './App.css';\nimport Grids from './Components/Grids/Grids';\nimport Settings from './Components/Settings/Settings';\nimport Container from 'react-bootstrap/Container';\nimport React, {useReducer, useState} from 'react';\n\nconst initialParams = {\n  area: 10000,\n  length:300,\n  implWidth:1,\n  speed:1, \n  completion:0\n}\n\nfunction reducerFunction(state, action){\n  switch(action.type){\n    case 'area':\n      return {...state, area: action.value};\n    case 'length':\n      return {...state, length: action.value};\n    case 'implWidth':\n      return {...state, implWidth: action.value};\n    case 'speed':\n      return {...state, speed: action.value};\n    case 'completion':\n        return {...state, completion: state.completion+1};\n    default:\n      throw new Error();\n  }\n}\n\nconst traverse = (rows, cols, reducer) => {\n\n  let time = 1;\n\n  for(let i = 0; i< cols; i++){\n    for(let j = 0; j< rows; j++){\n      const element = document.getElementById(`${i}-${j}`);\n    \n      if(element && element.classList.contains('obstacle')){\n        setTimeout(() => {\n          console.log(\"obstacle\");\n        }, [1000 * time++]);\n      }\n      else{\n        setTimeout(() => {\n          if(element){\n            element.classList.add('visited');\n            reducer({type:'completion'})\n          }\n        }, [1000* time++]);\n      }\n    }\n  }\n}\n\n\n\n\nfunction App() {\n\n  const [state, dispatch] = useReducer(reducerFunction, initialParams);\n  const [gridSize, setGridSize] = useState([1,1]);\n  const [obstacles, setObstacles] = useState(0);\n\n  return (\n    <div className=\"App\">\n      <Container fluid id=\"main-container\">\n          <Grids obstacles = {obstacles} setObstacles={setObstacles} gridSize={gridSize} setGridSize={setGridSize} state={state} />\n          <Settings gridSize={gridSize} traverse={() => traverse(gridSize[0], gridSize[1], dispatch)} state={state} dispatch={dispatch} total={(gridSize[0]*gridSize[1]) - obstacles} completion={state.completion}/>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css'; // or include from a CDN\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}